{
	"nodes":[
		{"id":"a8a6c1c41c1d1783","type":"text","text":"# 게임 요소\n\n화면은 게임보이 느낌\n위화면과 아래화면이 나누어져있고 아래화면은 조작하는 곳임\n십자키 + a,b 버튼\n\n## 플레이어\n플레이어는 쉴드, 체력, 공격력, 공격속도, 방어력, \n플레이어가 화면에서 움직이며 생성되는 적들을 처치\n적을 처치하면 랜덤으로 아이템 드랍(로그라이크 요소)\n웨이브 진행될 때마다 적이 강해짐 (데미지 증가, 체력 증가, 공격속도 증가)\n액션 요소 - 평타(근접 시 자동공격), 구르기(회피), 방어(타이밍 맞으면 패링)\n\n적 처치할 때마다 점수 증가 (기록해서 서버에 저장 및 스코어보드 기능)\n\n스코어보드에는 최종 점수와 자신이 먹은 아이템들이 같이 기록됨\n\n아이템들을 그래픽으로 구현하기에는 힘들기에  글자로 표현할거임\n로그라이크 게임이기에 다양한 아이템들이 있음 (다 패시브 아이템)\n한번 먹은 아이템들의 설명은 게임 종료 후 확인 할 수 있음 (메인화면에서 사전느낌으로 확인가능)\nA(Attack) - 공격력 증가\nB(Barrier) - 쉴드 증가\nC(Coin) - 획득하는 스코어 증가\nD(Dodge) - 회피 판정 향상\nE()","x":-180,"y":320,"width":797,"height":700},
		{"id":"f31c42c10bacf7ab","type":"text","text":"# 프로젝트 목적\nDart Flutter & 마이크로 서비스\nPlaystore 출시\n간단하면서도 경쟁할 수 있는(리더보드) 재미가 있는 게임\n웹사이트 하나 만들어서 거기에다가 스코어보드 및 플레이어 기록","x":-180,"y":-460,"width":520,"height":460},
		{"id":"8a6c0ed496331407","type":"text","text":"# 게임 장르\n\n\n로그라이크 rpg\n하이스코어 갱신하기","x":-180,"y":40,"width":400,"height":240},
		{"id":"14b44d187ee17b85","x":617,"y":120,"width":823,"height":620,"type":"text","text":"|단계|내용|예상 소요시간|\n|---|---|---|\n|✅ **[1] 개발 환경 세팅**|Flutter, Flame, VSCode, Emulator or Real Device|2시간|\n|✅ **[2] Flutter + Flame 기본 학습**|Flame GameWidget 실행, Sprite 띄우기|2시간|\n|✅ **[3] GameBoy UI 구현**|위쪽 화면(Game), 아래 조작 UI(십자키 + A/B)|2시간|\n|✅ **[4] PlayerComponent 구현**|이동, 평타(자동공격), 회피, 방어 로직|3시간|\n|✅ **[5] EnemyComponent 구현**|스폰, 웨이브 강화, 충돌 처리|3시간|\n|✅ **[6] 아이템 시스템**|드랍 → 스탯 적용, 아이템 도감 UI|3시간|\n|✅ **[7] 점수 시스템**|적 처치 시 점수 증가, 게임 오버 처리|1시간|\n|✅ **[8] Google Sign-In (Flutter)**|구글 로그인, 유저 정보 획득|2시간|\n|✅ **[9] FastAPI 서버 구축**|Python 설치, FastAPI Hello World|2시간|\n|✅ **[10] DB 모델링 + SQLAlchemy**|User table 생성, test insert/query|2시간|\n|✅ **[11] 리더보드 API 개발**|POST 점수 저장, GET top N 조회|2시간|\n|✅ **[12] Flutter ↔ FastAPI 연동**|Dio/http 패키지, 테스트 통신|2시간|\n|✅ **[13] 리더보드 웹페이지 제작**|HTML + JS fetch API, 테이블 출력|2시간|\n|✅ **[14] 배포 준비**|FastAPI 서버 Render/Railway 배포|1시간|\n|✅ **[15] 최종 테스트 & 튜닝**|전체 통합, 버그 수정, UI 디테일|1-2시간|\n"}
	],
	"edges":[]
}